
		debugger;
		/*==============================================================================================================*/
		/*
		* pg: 106 _ createNameSpace (with check logic) *스크린샷 참조
		*/
		var MYAPP = MYAPP || {};

		MYAPP.namespace = function (ns_string) {
			var parts = ns_string.split('.')
			  , parent = MYAPP
			  , i;

			if (parts[0] === "MYAPP") {
				parts = parts.slice(1);
			}

			for (i = 0; i < parts.length; i +=1) {
				if (typeof parent[parts[i]] === "undefined") {
					parent[parts[i]] = {};
				}

				parent = parent[parts[i]];
			}

			return parent;
		};

		var module2 = MYAPP.namespace('MYAPP.modules.module2');

		MYAPP.namespace('modules.module51');

		MYAPP.namespace('once.upon.a.time.there.was.this.long.nested.property');
		/*==============================================================================================================*/
		/*
		* pg: 111 _ privileged method Test *스크린샷 참조
		*/
		function Gadget () {
			var specs = {
				screen_width: 320,
				screen_heigth: 480,
				color: "white"
			}
			   , testVal = "testText";

			this.getSpecs = function () {
				return specs;
			};

			this.getTestVal = function () {
				return testVal;
			};
		}

		var toy = new Gadget()
		  , specs = toy.getSpecs()
		  ,testV = toy.getTestVal();

		specs.color = "black";
		testV = "fixed value";

		// Q: toy의 specs 객체의 color 값은 getSpecs에서 객체에 대한 참조값을 반환해서 변경되었다. 하지만 testVal은 변경되지 않았다. 이유는?
		// A: testVal은 객체가 아니기 때문??
		console.dir(toy);
		/*==============================================================================================================*/
		/*
		* pg: 112 _ 객체 리터럴을 비공식 멤버로 변경 _ test source
		*/
		var myobj1
		  , myobj3;
		(function () {
			var name = "my, oh my";

			myobj1 = {
				getName: function () {
					return name;
				}
			}

			//var을 붙일 경우 즉시실행함수가 종료됨가 동시에 초기화가 된다. 즉 즉시실행함수 졸료 후 myobj2는 접근할 수가 앖다.
			var myobj2 = {
				getName: function () {
					return name;
				}
			}

			myobj3 = {
				getName: function () {
					return this.name;
				}
			}

			console.dir(this);
		}());
		/*==============================================================================================================*/
		/*
		* pg: 113 _ 프로토타입과 비공개 멤버
		*/
		function Gadget () {
			var name = "testName";

			this.getName = function () {
				return name;
			}
		}

		Gadget.prototype = (function () {
			var browser = "Gadget.prototype";

			return {
				getBrowser: function () {
					return browser;
				}
			}
		}());
		/*==============================================================================================================*/
		/*
		* pg: 123 _ sandBox pattern
		*/

		// initialize Sandbox modules
		Sandbox.modules = {};

		Sandbox.modules.dom = function (box) {
			box.getElement = function () { console.log("box.getElement call"); };
			box.getStyle = function () { console.log("box.getStyle call"); };
			box.foo = "bar";
		};

		Sandbox.modules.ajax = function (box) {
			box.makeRequest = function () { console.log("box.makeRequest call"); };
			box.getResponse = function () { console.log("box.getResponse call"); };
		}

		// consturctor Sandbox
		function Sandbox () {
			var args = Array.prototype.slice.call(arguments)
			  , callback = args.pop()
			  , modules = (args[0] && typeof args[0] === "string") ? args : args[0]
			  , i;

			if (!(this instanceof Sandbox)) {
				return new Sandbox(modules, callback);
			}

			this.a = 1;
			this.b = 2;

			if (!modules || modules === "*" || modules[0] === "*") {
				modules = [];
				for (i in Sandbox.modules) {
					if (Sandbox.modules.hasOwnProperty(i)) {
						modules.push(i);
					}
				}
			}

			for (i = 0; i < modules.length; i += 1) {
				Sandbox.modules[modules[i]](this);
			}

			callback(this);
		}

		// call Sandbox _ example code
		new Sandbox('ajax', 'dom', function (box) { console.log(box)});
		/*==============================================================================================================*/
		/*
		* pg: 125 _ static member
		*/
		var Gadget = function () {};

		// Q: differnt  method from function in javascript
		// A: mehtod -> prototype / function -> another	_ 질문: 맞는지
		Gadget.isShiny = function () {
			var msg = "static call";

			console.dir(this);

			if (this instanceof Gadget) {
				msg = "this instanceof Gadget";
			}

			// Q: 즉시실행함수일경우 this는 window 인데 콘솔에서 Gadget.isShiny()를 할경우 this 가 "function () {}" 인 이유
			if (this instanceof Window) {
				msg = "this instanceof window";
			}

			return msg;
		};

		Gadget.prototype.setPrice = function (price) {
			this.price = price;
		};
		/*==============================================================================================================*/
		/*
		* pg: 128 _ close static member
		*/
		var Gadget = (function () {
			var count = 0
			  , NewGadget;

			NewGadget = function () {
				count += 1;
			};

			NewGadget.prototype.getLastId = function () {
				return count;
			};

			return NewGadget;
		}());

		var g1 = new Gadget();
		var g1 = new Gadget();
		var g1 = new Gadget();

		g1.getLastId();		//1
		g2.getLastId();		//2
		g3.getLastId();		//3
		/*==============================================================================================================*/
		/*
		* pg: 130 _ constant
		*/
		var constant = (function () {
			var constants = {}
			  , ownProp = Object.prototype.hasOwnProperty
			  , allowed = {
						  	string: 1,
						  	number: 1,
						  	boolean: 1
			  }
			  , prefix = (Math.random() + "_").slice(2);

			return {
				set: function (name, value) {
					if (this.isDefined(name)) {
						return false;
					}
					// Q: 뭐하는 구문인지...allowed는 왜 필요한지
					if (!ownProp.call(allowed, typeof value)) {
						return false;
					}
					constants[prefix + name] =value;
					return true;
				},
				isDefined: function (name) {
					return ownProp.call(constants, prefix + name);
				},
				get: function (name) {
					if (this.isDefined(name)) {
						return constants[prefix + name];
					}
					return null;
				}
			};
		}());
		/*==============================================================================================================*/
		/*
		* pg: 133 _ method (like "class" in java)
		*/

		(function () {
			if (typeof Function.prototype.method !== "function") {
				Function.prototype.method = function (name, implementation) {
					console.dir(this);
					this.prototype[name] = implementation;
					return this;
				};
			}
		}());

		var Person = function (name) {
			this.name = name;
		}.
				method("getName", function () {
					return this.name;
				}).
				method("setName", function (name) {
					this.name = name;
					return this;
				});
		/*==============================================================================================================*/
